#ifndef PARTICLESGPU_H
#define PARTICLESGPU_H

#include <vector>
#include <Random123/philox.h>
#include <Random123/uniform.hpp>
#include <cuda_runtime_api.h>

#include <thrust/device_ptr.h>  
#include <thrust/sort.h>
#include <thrust/functional.h>
#include <thrust/execution_policy.h>
#include <thrust/device_vector.h>
#include <thrust/sequence.h>
#include <thrust/gather.h>
#include <thrust/iterator/transform_iterator.h>

#include <limits>
#include <numeric>
#include <cstdio>

#include "particle_types.hpp"
// GPU Kernels
__global__ void box_distribution_kernel(t_particle *particles, int N, double L, unsigned long long seed);
__global__ void torus_distribution_kernel(t_particle *particles, int N, double major_r, double minor_r, double box_length, unsigned long long seed);
__global__ void generate_keys_kernel(t_particle *particles, int N, double box_length);
__global__ void set_rank_kernel(t_particle *p, int n, int rank_id);

// Utils
void gpu_barrier(int nprocs, const std::vector<cudaStream_t> &streams);
void enable_p2p_all(int ndev);

long long count_leq_device(int dev, t_particle *d_ptr, int n,
                           unsigned long long mid, cudaStream_t stream);

long long count_leq_device2(t_particle *d_ptr, int n,
                            unsigned long long key, cudaStream_t stream);

void compute_cuts_for_dev(int dev, t_particle *d_ptr, int n,
                          const std::vector<unsigned long long> &splitters,
                          std::vector<int> &cuts, cudaStream_t stream);

int distribute_gpu_particles(std::vector<t_particle *> &d_rank_array,
                             std::vector<int> &lens,
                             std::vector<cudaStream_t> &gpu_streams);

void distribute_gpu_particles_mpi(t_particle **d_rank_array, int *lens, int *capacity,
                                  cudaStream_t stream);

#endif
